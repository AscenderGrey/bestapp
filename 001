print('hello world')
def sum_of_any_level_list(seq):
    if not seq:
        return 0
    elif isinstance(seq[0], list):
        return sum_of_any_level_list(seq[0]) + sum_of_any_level_list(seq[1:])
    else:
        return seq[0] + sum_of_any_level_list(seq[1:])

print(sum_of_any_level_list([1, 2, [2, 3, 4], [5]]))

medelande = ("jokerLOL_")
def split_it():
    first_msg = (" ")
    second_msg = (" ")
    for i in medelande:
        if i.islower() or i == "_" or i == ".":
            first_msg += i
    for i in medelande:
        if i.isupper() or i == " " or i == "|":
            second_msg += i
    else:
        ()
    print(f'first message: {first_msg}, second message: {second_msg}')

print(split_it()

def sum_of_any_level_list(seq):
    tomlis = []
    if not seq:
        return 0
    elif isinstance(seq[0], list):
        return sum_of_any_level_list(seq[0]) + sum_of_any_level_list(seq[1:])
    else:
        if isinstance(seq[1:], int):
            return seq[0] + sum_of_any_level_list(seq[1:])

print(sum_of_any_level_list([1, 2, [2, 3, "a"], [5]]))

import math

spelare1_pjäser = []
spelare2_pjäser = []
def totalpjäs():
    totalpjäs = spelare1_pjäser + spelare2_pjäser
    return totalpjäs



def new_board():
    board = (spelare1_pjäser, spelare2_pjäser)
    return board


board = new_board()


def place_piece(board, x, y, player):
    if (x, y) in totalpjäs():
        return False
    if "spelare1" == player:
        spelare1_pjäser.append((x, y))
        return (x, y) in spelare1_pjäser
    elif "spelare2" == player:
        spelare2_pjäser.append((x, y))
        return (x, y) in spelare2_pjäser


def is_free(board, x, y):
    totalpjäs = spelare1_pjäser + spelare2_pjäser
    return not ((x, y) in totalpjäs)


def get_piece(board, x, y):
    if (x, y) in spelare1_pjäser:
        print("spelare1")
    elif (x, y) in spelare2_pjäser:
        print("spelare2")
    else:
        return False


def remove_piece(board, x, y):
    totalpjäs = spelare1_pjäser + spelare2_pjäser
    if (x, y) in totalpjäs:
        totalpjäs.pop(totalpjäs.index((x, y)))
        spelare1_pjäser.pop(spelare1_pjäser.index((x, y))) or spelare2_pjäser.pop(spelare2_pjäser.index((x, y)))
    else:
        return False


def move_piece(board, x, y, a, b):
    totalpjäs = spelare1_pjäser + spelare2_pjäser
    for i in range(len(totalpjäs)):
        if totalpjäs[i] == (x, y):
            totalpjäs[i] = (a, b)
            if (x, y) in spelare1_pjäser:
                for i in range(len(spelare1_pjäser)):
                    if spelare1_pjäser[i] == (x, y):
                        spelare1_pjäser[i] = (a, b)
            elif (x, y) in spelare2_pjäser:
                for i in range(len(spelare2_pjäser)):
                    if spelare2_pjäser[i] == (x, y):
                        spelare2_pjäser[i] = (a, b)

    return True


def count(board, x, y, player):
    if "spelare1" == player:
        if "collum" == x:
            output = [item for item in spelare1_pjäser
                      if item[0] == y]
            print(len(output))
        if "row" == x:
            output = [item for item in spelare1_pjäser
                      if item[1] == y]
            print(len(output))
    elif "spelare2" == player:
        if "collum" == x:
            output = [item for item in spelare2_pjäser
                      if item[0] == y]
            print(len(output))
        if "row" == x:
            output = [item for item in spelare2_pjäser
                      if item[1] == y]
            print(len(output))


def nearest_piece(board, x, y):
    totalpjäs = spelare1_pjäser + spelare2_pjäser
    tomlis = []
    for tup in totalpjäs:
        disx = tup[0] - x
        disy = tup[1] - y
        dis = math.sqrt(disx ** 2 + disy ** 2)
        tomlis.append(dis)
    tomlis.index((min(tomlis)))
    print(totalpjäs[(tomlis.index((min(tomlis))))])





def factorial(n):
    factorial = 1

    while n > 0:
        factorial = factorial*n
        n = n - 1

    return factorial

def recursive_factorial(n):
    if n == 0:
        return 1
    else:
        return n*factorial(n - 1)

def choose(x, y):
    t = recursive_factorial(x)
    p = recursive_factorial(y)
    i = recursive_factorial(x - y)
    h = t / (p*(i))
    return h

import math


def new_board(): # skapar ny tom dictionary
    board = {}
    return board


board = new_board()


def place_piece(board, x, y, player): #kollar om nycken är ledig, sedan lägger till nyckeln(x, y) och värdet(player)
    if not (x, y) in board:
        if "spelare1" == player:
            board[(x, y)] = 'spelare1'
            return (x, y) in board
        elif "spelare2" == player:
            board[(x, y)] = 'spelare2'
            return (x, y) in board
            
    else:
        return False


def is_free(board, x, y): #ser om nyckeln finns i board
    return not (x, y) in board


def get_piece(board, x, y): #funktion som tar värdet av nyckeln man skriver in
    if (x, y) in board:
        return board[(x, y)]
    else:
        return False


def remove_piece(board, x, y): #tar bort nyckeln
    if (x, y) not in board:
        return (x, y) in board
    if (x, y) in board:
        board.pop((x, y))
        return not (x, y) in board


def move_piece(board, x, y, a, b): #kollar först om destinatination är ledig, sen ändrar den nyckeln
    if (a, b) in board:
        return False
    else:
        board[(a, b)] = board[(x, y)]
        del board[(x, y)]
        return (a, b) in board


def count(board, x, y, player): #räknar alla pjäser av spelaren som är på viss rad
    if "spelare1" == player:
        if "column" == x:
            output = [item for item in board.keys() #tar alla tupler med första argumentet == y i spelaren1
                      if item[0] == y]
            return (len(output))  #returnar hur många tuplar den tog
        if "row" == x:
            output =[item for item in board.keys()
                      if item[1] == y]
            return (len(output))
    elif "spelare2" == player:
        if "column" == x:
            output = ([item for item in board.keys()
                      if item[0] == y])
            return len(output)
        if "row" == x:
            output = [item for item in board.keys()
                      if item[1] == y]
            return len(output)
    else:
        return 0





def nearest_piece(board, x, y):
    tomlis = [] #skapar tom lista
    for tup in board.keys(): #loop som tar första argumentet i tuplen minus x och andra minus y
        disx = tup[0] - x
        disy = tup[1] - y
        dis = math.sqrt(disx ** 2 + disy ** 2) #använder pytagoras sats för att kolla allas avstånd
        tomlis.append(dis)
    for i in tomlis:
        global minst
        minst = tomlis[0]
        if i < minst:
                    minst = i
    
    
    return (list(board.keys())[tomlis.index(minst)]) #kollar vilken nyckeln i board som har det indexet


